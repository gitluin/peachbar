# ------------------------------------------
# Graphical options
# ------------------------------------------
# Audio
AUDIOBG=$BARBG
MUTEBG="#C64756"

# Battery
CHRBG="#96BB7C"
LOWBG="#EEB76B"
PANICBG="#C64756"

# Bluetooth
BTUPBG="#A7C5EB"
BTDOWNBG="#C64756"

# Brightness
BRIGHTBG="#FAD586"

# Network
DOWNBG="#C64756"
UPBG="#96BB7C"


# ------------------------------------------
# Modules
# ------------------------------------------

# Define necessary files for your modules
BATSTATFILE="/sys/class/power_supply/BAT0/status"
BATCAPFILE="/sys/class/power_supply/BAT0/capacity"
NETFILE="/sys/class/net/wlp2s0/operstate"

Audio() {
	STATE="$(amixer get Master | awk -F"[][]" '/Left/ { print $4 }')"
	# NO quotes - drop whitespace
	VOL="$(amixer get Master | grep 'Front Left:' | \
		sed 's/.*[0-9] \[/[/' | \
		sed 's/\] .*/]/' | \
		sed 's/\[//' | \
		sed 's/\]//')"

	TO_OUT=""

	test $STATE = "off" && TO_OUT="%{B$MUTEBG} \ue04f %{B$MODULESBG} $VOL  " || \
		TO_OUT=" \ue050  $VOL  "

	echo -e "%{A3:rofi-audio-switch.sh:}$TO_OUT%{A}"
}

Battery() {
	BATSTAT="$(cat $BATSTATFILE)"
	BAT="$(cat $BATCAPFILE)"

	test $BAT -gt 100 && BAT=100

	BATSYM="\ue1a4"
	(test "$BATSTAT" = "Charging" || test "$BATSTAT" = "Unknown") || \
		test "$BATSTAT" = "Full" && BATSYM="\ue1a3"

	if test "$BATSYM" = "\ue1a4"; then
		if test $BAT -le 10; then
			echo -e "%{B$PANICBG} \ue19c %{B$MODULESBG} $BAT%  "
		elif test $BAT -le 20; then
			echo -e "%{B$LOWBG} $BATSYM %{B$MODULESBG} $BAT%  "
		else
			echo -e "$BATSYM $BAT%  "
		fi
	else
		echo -e "%{B$CHRBG} $BATSYM %{B$MODULESBG} $BAT%  "
	fi
}

Bluetooth() {
	STATUS="$(bluetoothctl show | grep -A 5 'Controller' | grep 'Powered' | sed 's/Powered: //')"

	TO_OUT=""

	test $STATUS = "yes" && TO_OUT="%{B$BTUPBG} \ue1a7 %{B$MODULESBG}  " || \
		TO_OUT="%{B$BTDOWNBG} \ue1a9 %{B$MODULESBG}  "

	echo -e "%{A3:bt-switch.sh:}$TO_OUT%{A}"
}

Brightness() {
	BRIGHT="$(light -G | sed 's/\..*//g')"

	echo -e "%{B$BRIGHTBG} \ue3aa %{B$MODULESBG} $BRIGHT%  "
}

Network() {
	NETSTATE="$(cat $NETFILE)"

	if [ $NETSTATE = "up" ]; then
		# No double quotes to ignore newline
		NETNAME="$(sudo wpa_cli -i wlp2s0 status | grep ssid)"
		NETNAME=$(echo $NETNAME | sed 's/bssid.*ssid/ssid/g' | sed 's/ssid=//g')
		NETNAME="%{B$UPBG} \ue63e %{B$MODULESBG} $NETNAME  "

	else
		NETNAME="%{B$DOWNBG} \ue640 %{B$MODULESBG} down  "
	fi

	echo -e "$NETNAME"
}

Time() {
	DTIME="$(date +'%m/%d/%y %H:%M')"
	echo -e " \ue192 $DTIME  "
}

# ------------------------------------------
# Parse sara output
# ------------------------------------------
# TODO: TAGS spacing does not look okay with arbitrary tags! Need to standardize.
#	1. Determine which tag has the most characters
#	2. Give that one 2 spaces of padding
#	3. Add the difference to everyone else
#		a. What about odd numbers?
Sara() {
	LTBUTTONSTART="%{A:sarasock 'setlayout tile':}%{A3:sarasock 'setlayout monocle':}"
	LTBUTTONEND="%{A}%{A}"

	MONNUM="$1"
	MONLINE="$(cat /tmp/sara-Mon$MONNUM.fifo)"

	# TODO: do these show up when sourced from peachbar.conf?
	# In case user wants to be less specific with symbols
	test -z "$SELTAGS" && SELTAGS="$TAGS"
	test -z "$OCCTAGS" && OCCTAGS="$TAGS"
	test -z "$TAGDELIMF" && TAGDELIMF="   "
	test -z "$TAGDELIMB" && TAGDELIMB="$TAGDELIMF"
	test -z "$LTDELIMF" && LTDELIMF="  "
	test -z "$LTDELIMB" && LTDELIMB="$LTDELIMF"

	TAGSTR="%{B$INFOBG}"

	# MonNum:OccupiedDesks:SelectedDesks:LayoutSymbol
	# 0:000000000:000000000:[]= -> 000000000:000000000:[]=
	MONLINE="$(echo $MONLINE | cut -d':' -f2-4)"
	ISDESKOCC="$(echo $MONLINE | cut -d':' -f1)"
	ISDESKSEL="$(echo $MONLINE | cut -d':' -f2)"
	LAYOUTSYM="$(echo $MONLINE | cut -d':' -f3)"

	# TODO: is ${#STRING} portable?
	# TODO: options for all tags or just occupied
	for (( i=0; i<${#ISDESKOCC}; i++ )); do
		# TODO: does not play nice with nested clickables. Causes tags to disappear on extra monitor.
		#	Possibly because the limit for clickables was previously reached?
		#TAGBUTTONSTART="%{A:sarasock 'view $i':}%{A3:sarasock 'toggleview $i':}"
		#TAGBUTTONEND="%{A}%{A}"

		TAGBUTTONSTART="%{A:sarasock 'view $i':}"
		TAGBUTTONEND="%{A}"

		if test "$(echo $ISDESKSEL | cut -c$((i + 1)))" -eq 1; then
			TMPFG=$SELCOLFG
			TMPBG=$SELCOLBG
			TMPTAGS=$SELTAGS
		elif test "$(echo $ISDESKOCC | cut -c$((i + 1)))" -eq 1; then
			TMPFG=$OCCCOLFG
			TMPBG=$OCCCOLBG
			TMPTAGS=$OCCTAGS
		else
			TMPFG=$INFOFG
			TMPBG=$INFOBG
			TMPTAGS=$TAGS
		fi

		TAGSTR="${TAGSTR}%{F$TMPFG}%{B$TMPBG}${TAGBUTTONSTART}${TAGDELIMF}$(echo -e $TMPTAGS | cut -d':' -f$((i + 1)) )${TAGDELIMB}${TAGBUTTONEND}%{B$INFOBG}%{F$INFOFG}"
	done
	TAGSTR="${TAGSTR}${LTBUTTONSTART}${LTDELIMF}$LAYOUTSYM${LTDELIMB}${LTBUTTONEND}%{B$BARBG}%{F$BARFG}"

	echo -e "${TAGSTR}"
}
